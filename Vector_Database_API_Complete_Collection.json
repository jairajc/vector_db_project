{
  "info": {
    "_postman_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "name": "Vector Database API - Complete Collection",
    "description": "Comprehensive Postman collection for Vector Database API testing with advanced features including LSH indexing, metadata filtering, and clustering support",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000"
    },
    {
      "key": "library_id",
      "value": ""
    },
    {
      "key": "chunk_id", 
      "value": ""
    },
    {
      "key": "document_id",
      "value": ""
    },
    {
      "key": "test_library_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "General",
      "item": [
        {
          "name": "API Root",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Libraries",
      "item": [
        {
          "name": "Create Library (Linear Index)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('index_type');",
                  "    pm.expect(response).to.have.property('similarity_metric');",
                  "    pm.expect(response).to.have.property('embedding_dimension');",
                  "    pm.collectionVariables.set('library_id', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"ML Research Library\",\n  \"description\": \"A comprehensive library for machine learning research documents\",\n  \"index_type\": \"linear\",\n  \"similarity_metric\": \"cosine\",\n  \"embedding_dimension\": 768,\n  \"metadata\": {\n    \"project\": \"research\",\n    \"version\": \"1.0\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries"]
            }
          },
          "response": []
        },
        {
          "name": "Create Library (KD-Tree Index)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Index type is kd_tree', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.index_type).to.equal('kd_tree');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Fast Search Library\",\n  \"description\": \"High-performance library with KD-Tree indexing\",\n  \"index_type\": \"kd_tree\",\n  \"similarity_metric\": \"euclidean\",\n  \"embedding_dimension\": 768,\n  \"metadata\": {\n    \"performance\": \"high\",\n    \"use_case\": \"real_time_search\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries"]
            }
          },
          "response": []
        },
        {
          "name": "Create Library (LSH Index)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Index type is lsh', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.index_type).to.equal('lsh');",
                  "});",
                  "",
                  "pm.test('LSH configuration is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('lsh_config');",
                  "    pm.expect(response.lsh_config).to.have.property('num_hash_tables');",
                  "    pm.expect(response.lsh_config).to.have.property('hash_length');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Scalable Search Library\",\n  \"description\": \"Large-scale library with LSH indexing for approximate search\",\n  \"index_type\": \"lsh\",\n  \"similarity_metric\": \"cosine\",\n  \"embedding_dimension\": 768,\n  \"lsh_config\": {\n    \"num_hash_tables\": 10,\n    \"hash_length\": 15,\n    \"hash_family\": \"cosine\"\n  },\n  \"metadata\": {\n    \"scale\": \"large\",\n    \"approximate\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries"]
            }
          },
          "response": []
        },
        {
          "name": "List Libraries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('libraries');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('page_size');",
                  "    pm.expect(response.libraries).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries?page=1&page_size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Library",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Library has all fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response).to.have.property('index_type');",
                  "    pm.expect(response).to.have.property('similarity_metric');",
                  "    pm.expect(response).to.have.property('embedding_dimension');",
                  "    pm.expect(response).to.have.property('chunk_count');",
                  "    pm.expect(response).to.have.property('created_at');",
                  "    pm.expect(response).to.have.property('updated_at');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Library",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Library was updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.description).to.include('Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated ML Research Library\",\n  \"description\": \"Updated comprehensive library for machine learning research documents\",\n  \"metadata\": {\n    \"project\": \"research\",\n    \"version\": \"1.1\",\n    \"last_updated\": \"2024-01-01\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Rebuild Library Index",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Rebuild message returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('rebuild started');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/rebuild-index",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "rebuild-index"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Library",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chunks", 
      "item": [
        {
          "name": "Create Chunk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Chunk has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('text');",
                  "    pm.expect(response).to.have.property('embedding');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response).to.have.property('library_id');",
                  "    pm.expect(response.embedding).to.be.an('array');",
                  "    pm.expect(response.embedding.length).to.equal(768);",
                  "    pm.collectionVariables.set('chunk_id', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Machine learning algorithms enable computers to learn patterns from data without explicit programming. These algorithms can be supervised, unsupervised, or reinforcement-based, each serving different purposes in data analysis and prediction tasks.\",\n  \"metadata\": {\n    \"source\": \"ml_fundamentals.pdf\",\n    \"page_number\": 15,\n    \"section\": \"introduction\",\n    \"custom_fields\": {\n      \"author\": \"Dr. Smith\",\n      \"category\": \"educational\",\n      \"difficulty\": \"beginner\",\n      \"topic\": \"algorithms\",\n      \"tags\": [\"machine-learning\", \"algorithms\", \"fundamentals\"]\n    }\n  },\n  \"document_id\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks"]
            }
          },
          "response": []
        },
        {
          "name": "Create Chunk with Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Chunk is linked to document', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.document_id).to.not.be.null;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Deep learning is a subset of machine learning that uses neural networks with multiple layers to model and understand complex patterns in data.\",\n  \"metadata\": {\n    \"source\": \"deep_learning_guide.pdf\",\n    \"page_number\": 3,\n    \"section\": \"overview\",\n    \"custom_fields\": {\n      \"difficulty\": \"intermediate\",\n      \"topic\": \"deep-learning\"\n    }\n  },\n  \"document_id\": \"{{document_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks"]
            }
          },
          "response": []
        },
        {
          "name": "List Chunks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('chunks');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('page_size');",
                  "    pm.expect(response.chunks).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks?page=1&page_size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size", 
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chunk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chunk has all fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('text');",
                  "    pm.expect(response).to.have.property('embedding');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response).to.have.property('library_id');",
                  "    pm.expect(response.embedding).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks/{{chunk_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks", "{{chunk_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Chunk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chunk was updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.text).to.include('Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Updated: Machine learning algorithms enable computers to learn patterns from data without explicit programming. These algorithms have revolutionized data science and artificial intelligence.\",\n  \"metadata\": {\n    \"source\": \"ml_fundamentals_v2.pdf\",\n    \"page_number\": 15,\n    \"section\": \"introduction\",\n    \"custom_fields\": {\n      \"difficulty\": \"beginner\",\n      \"topic\": \"algorithms\",\n      \"last_updated\": \"2024-01-01\",\n      \"tags\": [\"machine-learning\", \"algorithms\", \"updated\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks/{{chunk_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks", "{{chunk_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Chunk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/chunks/{{chunk_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "chunks", "{{chunk_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Documents",
      "item": [
        {
          "name": "Create Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Document has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response).to.have.property('library_id');",
                  "    pm.collectionVariables.set('document_id', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"content\": \"Machine learning is a method of data analysis that automates analytical model building. It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention.\",\n  \"source\": \"ml_fundamentals.pdf\",\n  \"author\": \"Dr. Jane Smith\",\n  \"metadata\": {\n    \"publication_date\": \"2024-01-01\",\n    \"category\": \"educational\",\n    \"difficulty\": \"beginner\",\n    \"tags\": [\"machine learning\", \"AI\", \"data science\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents"]
            }
          },
          "response": []
        },
        {
          "name": "List Documents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('documents');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.documents).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents?skip=0&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents"],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Document has all fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response).to.have.property('library_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Document Chunks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array of chunks', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('id');",
                  "        pm.expect(response[0]).to.have.property('text');",
                  "        pm.expect(response[0]).to.have.property('document_id');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents/{{document_id}}/chunks?skip=0&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents", "{{document_id}}", "chunks"],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Document was updated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.title).to.include('Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: Introduction to Machine Learning\",\n  \"content\": \"Machine learning is a method of data analysis that automates analytical model building. It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention. This updated version includes recent advances in the field.\",\n  \"metadata\": {\n    \"publication_date\": \"2024-01-01\",\n    \"last_updated\": \"2024-06-01\",\n    \"category\": \"educational\",\n    \"difficulty\": \"beginner\",\n    \"tags\": [\"machine learning\", \"AI\", \"data science\", \"updated\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{library_id}}/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{library_id}}", "documents", "{{document_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Complete Search Test Workflow",
      "item": [
        {
          "name": "🏗️ Setup: Create Test Library",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Library created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('test_library_id', response.id);",
                  "    console.log('Test Library ID:', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Search Test Library\",\n  \"description\": \"Library specifically for testing search functionality\",\n  \"index_type\": \"linear\",\n  \"similarity_metric\": \"cosine\",\n  \"embedding_dimension\": 768\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries"]
            }
          },
          "response": []
        },
        {
          "name": "Add Test Chunk 1: Machine Learning",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('ML Chunk created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.metadata.custom_fields.difficulty).to.equal('beginner');",
                  "    pm.collectionVariables.set('ml_chunk_id', response.id);",
                  "    console.log('ML Chunk created with custom_fields:', JSON.stringify(response.metadata.custom_fields));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Machine learning is a powerful subset of artificial intelligence that enables computers to learn and improve from experience without being explicitly programmed. It uses algorithms and statistical models to analyze and draw inferences from patterns in data. Popular machine learning techniques include supervised learning, unsupervised learning, and reinforcement learning.\",\n  \"metadata\": {\n    \"source\": \"ml_guide.pdf\",\n    \"page_number\": 1,\n    \"section\": \"introduction\",\n    \"custom_fields\": {\n      \"author\": \"Dr. Sarah Johnson\",\n      \"difficulty\": \"beginner\",\n      \"topic\": \"machine-learning\",\n      \"category\": \"tutorial\",\n      \"tags\": [\"ML\", \"AI\", \"algorithms\", \"data-science\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/chunks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "chunks"]
            }
          },
          "response": []
        },
        {
          "name": "Add Test Chunk 2: Deep Learning",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Deep Learning Chunk created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.custom_fields.difficulty).to.equal('intermediate');",
                  "    pm.collectionVariables.set('dl_chunk_id', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Deep learning represents a specialized branch of machine learning that mimics the human brain's neural networks. It utilizes artificial neural networks with multiple layers to model and understand complex patterns in large datasets. Deep learning has revolutionized computer vision, natural language processing, and speech recognition through architectures like CNNs, RNNs, and transformers.\",\n  \"metadata\": {\n    \"source\": \"deep_learning_handbook.pdf\",\n    \"page_number\": 25,\n    \"section\": \"neural-networks\",\n    \"custom_fields\": {\n      \"author\": \"Dr. Sarah Johnson\",\n      \"difficulty\": \"intermediate\",\n      \"topic\": \"deep-learning\",\n      \"category\": \"advanced-tutorial\",\n      \"tags\": [\"neural-networks\", \"CNN\", \"RNN\", \"transformers\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/chunks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "chunks"]
            }
          },
          "response": []
        },
        {
          "name": "Add Test Chunk 3: Data Science",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Data Science Chunk created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.custom_fields.author).to.equal('Prof. Michael Chen');",
                  "    pm.collectionVariables.set('ds_chunk_id', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Data science combines statistics, mathematics, programming, and domain expertise to extract meaningful insights from structured and unstructured data. It encompasses the entire data lifecycle from collection and cleaning to analysis and visualization. Data scientists use tools like Python, R, SQL, and various machine learning frameworks to solve complex business problems.\",\n  \"metadata\": {\n    \"source\": \"data_science_fundamentals.pdf\",\n    \"page_number\": 10,\n    \"section\": \"overview\",\n    \"custom_fields\": {\n      \"author\": \"Prof. Michael Chen\",\n      \"difficulty\": \"beginner\",\n      \"topic\": \"data-science\",\n      \"category\": \"fundamentals\",\n      \"tags\": [\"statistics\", \"python\", \"analytics\", \"visualization\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/chunks",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "chunks"]
            }
          },
          "response": []
        },
        {
          "name": "Test 1: Basic Semantic Search (Low Threshold)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Search returns results', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('results');",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total_found).to.be.greaterThan(0);",
                  "    console.log('Found', response.total_found, 'results for ML search');",
                  "});",
                  "",
                  "pm.test('Results have proper structure', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.results.length > 0) {",
                  "        const firstResult = response.results[0];",
                  "        pm.expect(firstResult).to.have.property('chunk');",
                  "        pm.expect(firstResult).to.have.property('similarity_score');",
                  "        pm.expect(firstResult.chunk).to.have.property('text');",
                  "        pm.expect(firstResult.chunk).to.have.property('metadata');",
                  "        console.log('Top result similarity:', firstResult.similarity_score);",
                  "        console.log('Top result preview:', firstResult.chunk.text.substring(0, 100) + '...');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"machine learning algorithms and artificial intelligence\",\n  \"k\": 10,\n  \"similarity_threshold\": 0.1,\n  \"include_metadata\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/search",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "search"]
            }
          },
          "response": []
        },
        {
          "name": "Test 2: Metadata Filter - Difficulty = Beginner",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Filtered search works', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('results');",
                  "    console.log('Beginner-level results found:', response.total_found);",
                  "    ",
                  "    // Check if filtering worked by examining custom_fields",
                  "    if (response.results.length > 0) {",
                  "        response.results.forEach((result, index) => {",
                  "            console.log(`Result ${index + 1}:`, {",
                  "                similarity: result.similarity_score,",
                  "                difficulty: result.chunk.metadata.custom_fields?.difficulty || 'N/A',",
                  "                topic: result.chunk.metadata.custom_fields?.topic || 'N/A'",
                  "            });",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"learning data analysis\",\n  \"k\": 5,\n  \"similarity_threshold\": 0.1,\n  \"include_metadata\": true,\n  \"metadata_filters\": [\n    {\n      \"field\": \"custom_fields.difficulty\",\n      \"operator\": \"eq\",\n      \"value\": \"beginner\"\n    }\n  ],\n  \"filter_mode\": \"and\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/search",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "search"]
            }
          },
          "response": []
        },
        {
          "name": "Test 3: Complex Metadata Filters (Author + Topic)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Complex filtering works', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    console.log('Complex filter results:', response.total_found);",
                  "    ",
                  "    if (response.results.length > 0) {",
                  "        response.results.forEach((result, index) => {",
                  "            const metadata = result.chunk.metadata;",
                  "            console.log(`Match ${index + 1}:`, {",
                  "                author: metadata.custom_fields?.author || 'N/A',",
                  "                topic: metadata.custom_fields?.topic || 'N/A',",
                  "                similarity: result.similarity_score",
                  "            });",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"artificial intelligence neural networks\",\n  \"k\": 5,\n  \"similarity_threshold\": 0.1,\n  \"include_metadata\": true,\n  \"metadata_filters\": [\n    {\n      \"field\": \"custom_fields.author\",\n      \"operator\": \"eq\",\n      \"value\": \"Dr. Sarah Johnson\"\n    },\n    {\n      \"field\": \"custom_fields.tags\",\n      \"operator\": \"contains\",\n      \"value\": \"AI\"\n    }\n  ],\n  \"filter_mode\": \"and\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/search",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "search"]
            }
          },
          "response": []
        },
        {
          "name": "Test 4: OR Filter Mode (Multiple Topics)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OR filtering works', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    console.log('OR filter results:', response.total_found);",
                  "    ",
                  "    // Should find chunks about either data-science OR deep-learning",
                  "    if (response.results.length > 0) {",
                  "        response.results.forEach((result, index) => {",
                  "            const topic = result.chunk.metadata.custom_fields?.topic;",
                  "            console.log(`OR Result ${index + 1}: Topic = ${topic}, Score = ${result.similarity_score}`);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"data analysis and neural networks\",\n  \"k\": 5,\n  \"similarity_threshold\": 0.1,\n  \"include_metadata\": true,\n  \"metadata_filters\": [\n    {\n      \"field\": \"custom_fields.topic\",\n      \"operator\": \"eq\",\n      \"value\": \"data-science\"\n    },\n    {\n      \"field\": \"custom_fields.topic\",\n      \"operator\": \"eq\",\n      \"value\": \"deep-learning\"\n    }\n  ],\n  \"filter_mode\": \"or\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/search",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "search"]
            }
          },
          "response": []
        },
        {
          "name": "Test 5: Source and Section Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Source/Section filtering works', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    console.log('Source filter results:', response.total_found);",
                  "    ",
                  "    if (response.results.length > 0) {",
                  "        response.results.forEach((result, index) => {",
                  "            const metadata = result.chunk.metadata;",
                  "            console.log(`Source Result ${index + 1}:`, {",
                  "                source: metadata.source,",
                  "                section: metadata.section,",
                  "                page: metadata.page_number",
                  "            });",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"programming and algorithms\",\n  \"k\": 5,\n  \"similarity_threshold\": 0.05,\n  \"include_metadata\": true,\n  \"metadata_filters\": [\n    {\n      \"field\": \"source\",\n      \"operator\": \"contains\",\n      \"value\": \".pdf\"\n    },\n    {\n      \"field\": \"section\",\n      \"operator\": \"in\",\n      \"value\": [\"introduction\", \"overview\"]\n    }\n  ],\n  \"filter_mode\": \"and\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/search",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "search"]
            }
          },
          "response": []
        },
        {
          "name": "Test 6: Verify All Chunks Indexed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('All chunks properly indexed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.chunks).to.be.an('array');",
                  "    pm.expect(response.chunks.length).to.be.at.least(3);",
                  "    console.log('Total chunks in library:', response.chunks.length);",
                  "    ",
                  "    response.chunks.forEach((chunk, index) => {",
                  "        console.log(`Chunk ${index + 1}:`, {",
                  "            id: chunk.id.substring(0, 8) + '...',",
                  "            topic: chunk.metadata.custom_fields?.topic || 'N/A',",
                  "            difficulty: chunk.metadata.custom_fields?.difficulty || 'N/A',",
                  "            text_preview: chunk.text.substring(0, 50) + '...'",
                  "        });",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}/chunks?page=1&page_size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}", "chunks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "🧹 Cleanup: Delete Test Library",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Test library cleaned up', function () {",
                  "    pm.response.to.have.status(204);",
                  "    console.log(' Test library deleted successfully');",
                  "    pm.collectionVariables.unset('test_library_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/libraries/{{test_library_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "libraries", "{{test_library_id}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
